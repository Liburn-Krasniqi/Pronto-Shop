// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String @unique
  hash      String
  firstName String
  lastName  String
  role      String

  paymentCards PaymentCard[]
  phoneNumbers PhoneNumber[]
  addresses    UserAddress?
  RefreshToken RefreshToken[]

  @@map("users")
}

model PhoneNumber {
  id Int @id @default(autoincrement())

  userId      Int
  countryCode String?
  phoneNumer  String?
  user        User    @relation(fields: [userId], references: [id])

  // @@id([userId])
  @@map("phoneNumers")
}

model PaymentCard {
  id              Int      @id @default(autoincrement())
  userId          Int
  createdAt       DateTime @default(now())
  cardHolderNamea String?
  last4           Int?
  brand           String?
  expMonth        String?
  expYear         String?
  isDefault       String?
  user            User     @relation(fields: [userId], references: [id])

  // @@id([userId])
  @@map("paymentCards")
}

model UserAddress {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VendorAddress {
  id         Int     @id @default(autoincrement())
  vendorId   Int     @unique
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  vendor     Vendor? @relation(fields: [vendorId], references: [id])

  @@index([vendorId])
}

model Vendor {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  businessName String @unique
  email        String @unique
  hash         String
  phone_number String

  addresses VendorAddress?
  products  Product[]
  RefreshToken RefreshToken[]
  

  @@index([id]) //indexing for optimized queries
  @@map("vendors")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int?
  vendorId  Int?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vendor    Vendor?   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  type      String    //user or vendor
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  categoryId  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Inventory {
  id            String    @id @default(uuid())
  stockQuantity Int       @default(0)
  restockDate   DateTime?
  updatedAt     DateTime  @updatedAt
  productId     String    @unique

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id            String   @id @default(uuid())
  name          String   @db.VarChar(255)
  description   String   @db.VarChar(511)
  price         Decimal  @db.Decimal(10, 2) //Using Decimal on prices to avoid floating-point precision issues with currency.
  discountPrice Decimal? @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  imageURL      String[]
  vendorid      Int

  Vendor      Vendor        @relation(fields: [vendorid], references: [id], onDelete: Cascade)
  subcategory Subcategory[]
  Inventory   Inventory?

  @@index([id]) //indexing for optimized queries
}

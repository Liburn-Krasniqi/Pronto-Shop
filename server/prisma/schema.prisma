// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  hash String
  firstName String
  lastName String
  role String

  paymentCards PaymentCard[]
  phoneNumbers PhoneNumber[]
  addresses UserAddress?

  @@map("users")
  RefreshToken RefreshToken[]
}

model PhoneNumber{
  id Int @id @default(autoincrement())

  userId Int
  countryCode String?
  phoneNumer String?
  // @@id([userId])
  @@map("phoneNumers")
  user User @relation(fields: [userId], references: [id])
  
}
model PaymentCard{//This is mostly placeholder since payments aren't added yet and the table needs stripe info
  id Int @id @default(autoincrement())
  userId Int
  createdAt DateTime @default(now())
  cardHolderNamea String?
  last4 Int?
  brand String?
  expMonth String?
  expYear String?
  isDefault String?

  // @@id([userId])
  @@map("paymentCards")
  user User @relation(fields: [userId], references: [id])
  
}

model UserAddress {
  id Int @id @default(autoincrement())
  userId Int @unique
  street String?
  city String?
  state String?
  postalCode String?
  country String?

  user User? @relation(fields: [userId], references: [id])
  @@index([userId])
}

model VendorAddress {
  id Int @id @default(autoincrement())
  vendorId Int @unique
  street String?
  city String?
  state String?
  postalCode String?
  country String?
  vendor Vendor? @relation(fields: [vendorId], references: [id])
  @@index([vendorId])
}


model Vendor{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  businessName String @unique
  email String @unique
  hash String
  phone_number String
  
  addresses VendorAddress?
  // products Product[]

  @@map("vendors")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}